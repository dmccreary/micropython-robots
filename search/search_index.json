{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STEM Robots","text":"<p>Welcome to the STEM Robots website!  This site is dedicated to helping students learn computational thinking by using low-cost ($19) robots that are custom-designed for teaching computational thinking skills.</p> <p>The curriculum is designed around Generative AI tools so that you can generate custom lesson plans for many personas and grade levels.</p>"},{"location":"about/","title":"About the STEM Robotics Program","text":"<p>This site was created to provide low-cost yet fun ways that our students can learn computational thinking. Over many years of organizing coding clubs, we have that kids love robots!  When designed thoughtfully, robots combine motion, color, sounds and displays that engage students more than any other teaching tool we have tested.</p> <p>But in the past, even simple robots offered by retailers and promoted by commercial companies were designed first to increase their stockholder value and second to provide learning value.  A typical price for a retail robot kit is $370.  They often justify this cost because they claim that the lesson plans and program examples took millions of dollars to create.  But generative AI is changing this.  Today we have tools that can generate customized lesson plans including working programs for a small fraction of these costs.</p> <p>We have heard many stories of schools that can't afford to give each student their own robot.  But at $19 per robot, we can enable many schools to dramatically decrease the robot-to-student ratios.</p> <p>This site started in 2014 with our experiments on watching kids use these projects.  Every year we would make small changes to increase the fun and lower the cost.  We are convinced you don't need to spend hundreds of dollars per robot to create a fun and engaging experience that provides a measurable improvement in STEM engagement and interest in coding.</p>"},{"location":"about/#metrics-for-a-great-stem-robotics-curriculum","title":"Metrics for a Great STEM Robotics Curriculum","text":"<p>We use ChatGPT to come up with a way to measure the value of a STEM robotics system.  Here is the prompt:</p> <pre><code>Our school is fed up with vendors trying to sell us $350 STEM\nrobots kits that use cheep parts and batteries that are not\nreplaceable. How can we come up with a simple set of objective\nmeasures to rate the quality of STEM robots?  Include the\nquality of instruction manuals and curriculum that can be\ncustomized to the needs of teachers, volunteers and students.\n\nReturn the results in markdown level three headers.\n</code></pre> <p>Here is the response:</p> <p>Developing objective measures to evaluate the quality of STEM robots, including the quality of instruction manuals and customizable curricula, is a great way to ensure value for money and educational effectiveness. Here are some key criteria you could consider:</p>"},{"location":"about/#hardware-quality","title":"Hardware Quality","text":"<ul> <li>Durability: Assess the robustness of the robot's construction. Are the materials used sturdy enough for repeated use by students?</li> <li>Modularity: Consider whether parts can be easily added or removed, which can aid in teaching different levels of complexity.</li> <li>Battery Life and Replacement: Check the battery life per charge and ensure that batteries are replaceable and reasonably priced.</li> <li>Sensor and Actuator Quality: Evaluate the performance and reliability of sensors and actuators, as these are crucial for the functionality of the robot.</li> </ul>"},{"location":"about/#cost-effectiveness","title":"Cost Effectiveness","text":"<ul> <li>Initial Cost vs. Part Quality: Compare the cost of the robot with the quality and longevity of the components used.</li> <li>Maintenance Costs: Consider long-term costs related to maintenance, part replacement, and upgrades.</li> </ul>"},{"location":"about/#ease-of-use","title":"Ease of Use","text":"<ul> <li>User-Friendly Design: Is the robot easy to assemble and disassemble? This is important for younger students or those new to robotics.</li> <li>Documentation: Look for clear, comprehensive, and well-organized instruction manuals that cater to different skill levels.</li> </ul>"},{"location":"about/#educational-value","title":"Educational Value","text":"<ul> <li>Curriculum Integration: Evaluate how well the robot's features align with educational standards and curricular goals. Can it be integrated into subjects beyond technology, such as math, science, or arts?</li> <li>Progressive Learning: Does the robot offer different levels of complexity for varied learning stages? This is essential to cater to both beginners and advanced students.</li> <li>Problem-Solving and Creativity: Assess if the robot challenges students to solve real problems and encourages creativity.</li> </ul>"},{"location":"about/#customizability","title":"Customizability","text":"<ul> <li>Software Customization: Check if the software can be easily modified or programmed by teachers and students. Support for multiple programming languages can be a plus.</li> <li>Hardware Customization: Determine if it's possible to modify or expand the hardware to meet different teaching needs or student projects.</li> </ul>"},{"location":"about/#support-and-community","title":"Support and Community","text":"<ul> <li>Technical Support: Reliable and accessible customer support is crucial for troubleshooting and guidance.</li> <li>Community Resources: A strong user community can provide valuable support and resources such as shared lesson plans, tutorials, and project ideas.</li> </ul>"},{"location":"about/#feedback-and-reviews","title":"Feedback and Reviews","text":"<ul> <li>User Feedback: Gather feedback from other educators who have used the robots. User reviews can provide insights into reliability, usability, and educational impact.</li> <li>Pilot Testing: Consider conducting a pilot test with a few robots in your school to see how they perform in real educational settings and gather firsthand feedback.</li> </ul> <p>By establishing a rubric based on these categories, your school can systematically evaluate different STEM robots and select those that offer the best learning potential and value for money. This approach not only helps in making informed purchasing decisions but also supports the educational goals of your STEM programs.</p>"},{"location":"about/#why-we-built-this-website-our-journey","title":"Why We Built This Website: Our Journey","text":"<p>Our journey to build an awesome STEM robotics website began with a simple blog post back in 2014 about repairing the motors in our old Arduino kits. Our insight was that by using a simple cable tie and some heat shrink, we prevented the kids from breaking the wires to our motors.  This little change lowered the frustration of broken kits and allowed our labs with motors to be reliable.  Sometimes little changes make a big difference.</p> <p>We started wondering if other schools were also having these problems.  Why didn't the people who supplied these kits realize how fragile the parts were? Why did they skimp on quality and cause their kits to break so easily?</p> <p>This was the first step on our journey.</p>"},{"location":"about/#our-first-robot","title":"Our First Robot","text":"<p>Yes, kids love color and motion!  Robot classes were usually the first classes to get full. However, we were frustrated by the closed Finch Robots and here that were unreliable and had no way to extend motors and sensors. So we thought about building our own robot.</p> <p>We did some research and ordered some random parts from Amazon.  We used a four-motor chassis, a $35 Arduino Uno and a motor controller.  It turns out that we only needed two motors by the way. The total price was almost $70.  But our students loved the way we had a breadboard on the top so they could add their own lights and sensors. It was a hit!  But looking back, all those wires were difficult for the kids to get right.  Pulling one wire out would make the robot stop working.</p>"},{"location":"about/#the-uno-robot-cutting-costs-and-increasing-content","title":"The Uno Robot: Cutting Costs and Increasing Content","text":"<p>After talking to several others in the Minnesota Arduino club we came across a relatively low-cost Arduino Nano that could be mounted directly on the breadboard.  The Uno Robot was only about $30 and was far more extensible than any of the commercial robots schools were buying!  We also started putting our lesson plans on GitHub to make it easier for other organizations to reuse our content.</p> <p>But the Arduino Uno ecosystem was not kind.  The lower-cost Arduino Uno chips used a driver that was not supported and each new release of the MacOS would make our drivers difficult to install.  It required admin rights to install software and it was impossible for our students to use some of their home computers.  Despite frequent posts to the Arduino community, nothing was done because the drivers were not supported and they wanted us to pay $35 for the official Arduino hardware.  We were looking for options.  We also wanted to use Python which had become the de facto first language for most high schools  The change finally happened in January 2021!</p>"},{"location":"about/#the-switch-to-raspberry-pi-pico-and-micropython","title":"The Switch to Raspberry Pi Pico and MicroPython","text":"<p>The announcement of the Raspberry Pi Pico rocked our world.  Not only was it only $4, but it also fit right on our breadboard!  It ran MicroPython and had the massive support of the entire Raspberry Pi Foundation behind it.  We knew we had a solid partner who would not try to hijack our education to line the pockets of their shareholders.</p> <p>By May of 2021 we had started to upgrade old Arduino Nano robots to the Raspberry Pi Pico.  We had a robot that had over 100 times as much RAM and cost 1/8 of the Arduino UNO!</p> <p>By June of 2021 we were sending out robot kits to our COVID-era students in their homes.</p> <p>Much of the content for this site has migrated from the amazing MicroPython for Kids website.  Although there is a lot of useful content on that site, some of our most popular STEM robot content has got buried deep within the Kits structures.  So we decided that the STEM robot really needed its own separate site.  Our site will still link to the relevant pages on that site.</p> <p>The Raspberry Pi Pico was not perfect.  Because the pin labels were on the bottom of the board we could not read any of them when they were on the breadboard. This little \"oversight\" cause endless hours of headache by forcing us to put colored marks on all our breadboards and print out pin diagrams.  But wait.  There is more!</p>"},{"location":"about/#the-cytron-rp2040-board","title":"The Cytron RP2040 Board","text":"<p>The next big advance came from a brilliant engineer from Malaysia who worked at Cytron.  He developed the Cytron Maker Pi RP2040. This $12 board is so complete that has entirely changed the ease of use of our robots.  Everything we need is included on the board including buttons and LED to test motor connections, a speaker and user programmable buttons. WOW!  Now students had far fewer wires to connect and fewer things that could go wrong.  We have eliminated all the need for soldering.  We could now spend more time learning to code and teach computational thinking.</p>"},{"location":"about/#the-time-of-flight-sensor","title":"The Time of Flight Sensor","text":"<p>The last small addition to our robot was to upgrade the front distance sensor from the old and fragile ultrasonic ping distance sensor to the new shiny time-of-flight sensor. This sensor uses the I2C bus and has both accuracy and response times that are far better then the ultrasonic sensors.  They are also about the same price - about $3 each.</p>"},{"location":"about/#the-rise-of-generative-ai","title":"The Rise of Generative AI","text":"<p>In December of 2022, ChatGPT rocked the world by being able to generate large blocks of high-quality  content just by giving it a small prompt. Although we had been writing about generating lesson plans since 2020, many people ignored us.  But after ChatGPT came out everything changed.  We were teaching classes on how to generate highly personalized lesson plans for not just STEM robotics classes but for many other topics in schools.</p>"},{"location":"about/#adding-microsims","title":"Adding MicroSims","text":"<p>We can also use Generative AI to create online simulators to help our students visualize what is going on within our robot.  For example, many students have a difficult time visualizing how pulse-width modulation works.  This simple MicroSim is allowing us to hyper-personalize both lesson plans as well as interactive simulations that are generated by teachers and run in your browser.</p> <p>We now have also included sample Python scripts so that you can generate high-quality lesson plans on many topics in the course for any grade level.</p>"},{"location":"about/#conclusion","title":"Conclusion","text":"<p>Here is a summary of what we learned:</p> <ol> <li>Open systems are more sustainable</li> <li>Vendors focus on selling you new robots, not building maintainable STEM robots</li> <li>Using interchangeable parts will lower your maintenance and repair costs</li> <li>Teach breadboarding skills early</li> <li>Python rocks</li> <li>Generating lesson plans, sample code, and simulations is revolutionizing STEM robots</li> <li>Invest in your community and support open-source content</li> </ol> <p>Good Luck!</p>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"faq/","title":"STEM Robotics Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#can-we-print-our-own-robot-chassis-using-a-3d-printer","title":"Can we print our own robot chassis using a 3D printer?","text":"<p>Yes!  We have samples here:</p> <ul> <li>Cytron Board 3D Model</li> <li>3D Printed Parts for the Donkey Car</li> </ul>"},{"location":"faq/#can-we-print-our-own-mounts-for-sensors","title":"Can we print our own mounts for sensors?","text":"<p>Yes! We have a sample here: A 3D-printed Mount for Time-of-Flight Distance Sensors</p>"},{"location":"glossary/","title":"Glossary","text":"<p>STEM Robots Glossary of Terms</p> <p>If you are new to STEM robotics, this glossary is a good place to review your terminology.</p>"},{"location":"glossary/#computational-thinking","title":"Computational Thinking","text":"<p>Computational thinking is a problem-solving methodology that involves applying concepts and techniques from computer science to understand and address complex issues.</p> <p>Computational thinking encompasses skills such as algorithmic thinking, pattern recognition, abstraction, and decomposition. This approach encourages breaking down problems into manageable parts, identifying patterns, abstracting out details to focus on the core issue, and developing step-by-step solutions (algorithms). Computational thinking is not just for computer scientists but is a fundamental skill for everyone, applicable in various fields including business, education, and research. It aids in developing logical reasoning and efficient problem-solving approaches.</p> <p>The lesson plans on this site put a strong focus on increasing computational thinking skills.  Many lessons start with a difficult problem and then proceed to divide the problem into smaller components.</p> <p>CoderDojo Computational Thinking Page</p>"},{"location":"glossary/#microsims","title":"MicroSims","text":"<p>Small web-based programs that use simulations and animations to explain concepts.  MicroSims (short for Micro-Simulations) are small enough that a first draft can be created by generative AI programs such as ChatGPT.</p> <p>Many lessons on this site also feature MicroSims that reinforce concepts and that can be quickly extended by teachers or mentors.</p> <ul> <li>MicroSims website</li> </ul>"},{"location":"glossary/#physical-computing","title":"Physical Computing","text":"<p>The process of using computers to read data from sensors about the world around us and then taking action on this incoming data stream. These actions are typically doing things like blinking an LED, moving a motor, or updating a display.</p>"},{"location":"glossary/#rhizomatic-learning","title":"Rhizomatic Learning","text":"<p>An approach to learning that uses a non-linear, organic process, where knowledge is interconnected and grows in multiple directions, much like a rhizome. </p> <p>Rhizomatic learning is an educational concept that draws its analogy from the rhizome, a type of plant root system.</p> <p>It emphasizes the importance of context, personal interpretation, and the idea that knowledge and learning are not static but are constantly evolving. Rhizomatic learning encourages learners to create their own paths through content, fostering critical thinking, adaptability, and collaboration. This approach contrasts with traditional hierarchical models of education, offering a more fluid and dynamic understanding of knowledge acquisition.</p>"},{"location":"glossary/#references","title":"References","text":"<p>MicroPython for Kids Glossary</p>"},{"location":"great-ways-to-teach/","title":"Great Ways to Teach","text":"<p>We strive to make this STEM Robot an example of the best way to teach. Here are some good and bad ways to teach.</p>"},{"location":"great-ways-to-teach/#examples-of-good-pedagogy","title":"Examples of Good Pedagogy","text":""},{"location":"great-ways-to-teach/#interactive-learning","title":"Interactive Learning","text":"<ul> <li>Description: Engaging students in hands-on activities, group work, and discussions rather than just lecturing.</li> <li>Impact: Increases understanding and retention of material by actively involving students in the learning process.</li> </ul>"},{"location":"great-ways-to-teach/#differentiated-instruction","title":"Differentiated Instruction","text":"<ul> <li>Description: Tailoring lessons to meet the varied skill levels and learning styles of students.</li> <li>Impact: Helps all students learn effectively, whether they need more challenge or more support, ensuring no one is left behind.</li> </ul>"},{"location":"great-ways-to-teach/#formative-assessment","title":"Formative Assessment","text":"<ul> <li>Description: Using quizzes, discussions, and projects to gauge student understanding throughout the educational process, not just at the end.</li> <li>Impact: Allows teachers to identify where students are struggling and adjust instruction accordingly, fostering a better learning environment.</li> </ul>"},{"location":"great-ways-to-teach/#incorporation-of-technology","title":"Incorporation of Technology","text":"<ul> <li>Description: Using tools like educational software, interactive whiteboards, and AI tutors to enhance learning.</li> <li>Impact: Makes learning more engaging and accessible, and can provide personalized learning experiences.</li> </ul>"},{"location":"great-ways-to-teach/#examples-of-bad-pedagogy","title":"Examples of Bad Pedagogy","text":""},{"location":"great-ways-to-teach/#one-size-fits-all-approach","title":"One-Size-Fits-All Approach**:","text":"<ul> <li>Description: Delivering the same lesson in the same way to all students, regardless of their individual learning needs or abilities.</li> <li>Impact: Can lead to disengagement and poor understanding among students who do not resonate with the general teaching method.</li> </ul>"},{"location":"great-ways-to-teach/#lack-of-engagement","title":"Lack of Engagement**:","text":"<ul> <li>Description: Relying solely on lectures without interaction or practical application.</li> <li>Impact: Students may become passive recipients of information, leading to lower retention rates and lack of interest in the subject matter.</li> </ul>"},{"location":"great-ways-to-teach/#overemphasis-on-memorization","title":"Overemphasis on Memorization**:","text":"<ul> <li>Description: Focusing heavily on rote learning and memorization without understanding the underlying concepts.</li> <li>Impact: Students may perform well on tests but fail to apply knowledge in real-world situations, indicating a shallow level of learning.</li> </ul>"},{"location":"great-ways-to-teach/#neglecting-feedback","title":"Neglecting Feedback**:","text":"<ul> <li>Description: Failing to provide students with timely or constructive feedback on their work.</li> <li>Impact: Without feedback, students cannot learn from their mistakes or understand how to improve, which can hinder their academic progress.</li> </ul> <p>These examples highlight the importance of adopting effective pedagogical strategies that cater to diverse learning needs and encourage active participation and deeper understanding.</p>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"personas/","title":"STEM Robot Personas","text":"<p>When you generate content, make sure you mention one of the personas that us this robot it a school.</p>"},{"location":"personas/#sample-persona-prompt","title":"Sample Persona Prompt","text":"<pre><code>For the following STEM robot kit and website, generate a list of personas that might be\ninvolved in using this robot in a classroom to teach computational thinking.  The lesson plans must be integrated into the schools curriculum and learning management system.\n\nThe STEM Robot is a low-cost but fun robot designed to teach kids the principles of computational thinking. It is built around the Raspberry Pi RP2040 microcontrollers and is programmed with MicroPython. It is designed to cost under $19. The base STEM robot has the following parts:\n\n1. 2 6-volt DC hobby motors. \n2. 4 AA batteries in a battery pack. \n3. A \"Smart Car\" chassis. \n4. A Cytron Maker Pi RP2040 robotics board that includes motor drivers, 13 blue LEDs for GPIO status, 2 NeoPixels, a Piezo buzzer with mute switch, two customizable momentary buttons, 7 Grove connectors, 4 servo drivers, a power on switch, a power indicator LED. and LEDs and buttons to test the motor connections. \n5. A VL53L0X time-of-flight distance sensor that uses the I2C protocol to measure distance. \n6. A USB cable for programming the car. The robot is programmed with the Thonny Integrated Development for Python. Note that the RP2040 is a dual-core MicroController with 264K SRAM and 2MB flash memory.\n\nThe STEM Robot works with a website that stores lesson plans, sample programs and assessments.\n\nReturn the list in markdown format with each persona as a level 3 header.\nSort the list from the most frequent users of the \n</code></pre>"},{"location":"personas/#chatgpt-response","title":"ChatGPT Response","text":"<p>To effectively use the STEM Robot in a classroom setting to teach computational thinking, several personas would likely be involved, each with specific roles and responsibilities. Here's a list of potential personas:</p>"},{"location":"personas/#students-learners","title":"Students (Learners)","text":"<ul> <li>Role: Primary users of the STEM Robot.</li> <li>Responsibilities: Engaging with the robot to learn computational thinking, participating actively in problem-solving tasks, and collaborating with peers to design and program the robot.</li> </ul>"},{"location":"personas/#teacher-computational-thinkingcomputer-science","title":"Teacher (Computational Thinking/Computer Science)","text":"<ul> <li>Role: Facilitates the learning experiences involving the STEM Robot.</li> <li>Responsibilities: Planning and delivering lessons that incorporate the robot, guiding students through programming exercises, and assessing students' progress in computational thinking.</li> </ul>"},{"location":"personas/#volunteermentor","title":"Volunteer/Mentor","text":"<ul> <li>Role: Non-school staff that are drawn from the community to help teach computer science concepts</li> <li>Responsibilities: Subject matter experts on programming and hardware that help students reach their learning objectives.</li> </ul>"},{"location":"personas/#educational-technology-specialist","title":"Educational Technology Specialist","text":"<ul> <li>Role: Evaluates its educational value, and ensures it aligns with curriculum standards.</li> <li>Responsibilities: Selecting suitable technology tools, training teachers, troubleshooting technical issues, and assessing the effectiveness of the robot in teaching computational principles.</li> </ul>"},{"location":"personas/#parentguardian","title":"Parent/Guardian","text":"<ul> <li>Role: Supports learning outside of the classroom.</li> <li>Responsibilities: Encouraging practice at home, understanding the educational value of the robot, and possibly assisting in troubleshooting or overseeing projects involving the robot.</li> </ul>"},{"location":"personas/#curriculum-developer","title":"Curriculum Developer","text":"<ul> <li>Role: Designs educational content and activities that utilize the robot to teach key concepts in computational thinking.</li> <li>Responsibilities: Creating lesson plans, tutorials, and projects that make effective use of the robot's capabilities, ensuring a progressive learning curve, and aligning activities with educational standards.</li> </ul>"},{"location":"personas/#school-administrator","title":"School Administrator","text":"<ul> <li>Role: Supports and approves the integration of new technology like the STEM Robot into the educational offerings of the school.</li> <li>Responsibilities: Allocating budget for technological tools, facilitating professional development for teachers, and ensuring the technology is used responsibly within the school environment.</li> </ul>"},{"location":"personas/#technical-support-staff","title":"Technical Support Staff","text":"<ul> <li>Role: Provides backend support for the maintenance and functionality of the robots.</li> <li>Responsibilities: Regular maintenance checks, updating software as needed, and repairing any hardware issues to ensure the robots are always ready for classroom use.  Ensures student can access the website and use a local learning management system.</li> </ul> <p>Each of these personas plays a crucial role in the ecosystem around the STEM Robot, contributing to its goal of enhancing computational thinking skills among students.</p>"},{"location":"references/","title":"References","text":""},{"location":"references/#micropython-for-kids","title":"MicroPython for Kids","text":"<p>This is the original website that we built for our students.  It has hundreds of step-by-step tutorials on learning how to use MicroPython to write programs that control robots.</p> <p>MicroPython for Kids Website</p>"},{"location":"references/#introduction-to-python-with-trinket","title":"Introduction to Python with Trinket","text":"<p>This site is our most popular site for students who are new to Python programming.  This has a well-designed set of lessons that use the Trinket site which is a kid-safe place to learn Python with turtle graphics.</p> <p>Introduction to Python Website</p>"},{"location":"references/#ai-racing-league","title":"AI Racing League","text":"<p>This project uses an RC car body with a full Raspberry Pi and camera to teach the basics of machine learning and computer vision.  The cost of the hardware is about $300/car and we use a $900 PC with a GPU to train models.</p> <p>AI Racing League Website</p>"},{"location":"references/#robot-faces","title":"Robot Faces","text":"<p>For students who want to put faces on their robots, this is the site for you.  The site starts with learning basic drawing commands for squares and circles and then builds up to drawing complex faces with eyes, smiles and eyebrows.  You can even teach your robot to wink!</p> <p>Robot Faces Website</p>"},{"location":"references/#clocks-and-watches","title":"Clocks and Watches","text":"<p>Clocks and Watches Website</p>"},{"location":"references/#internet-of-things-course","title":"Internet of Things Course","text":"<p>For advanced high-school students, we encourage you to continue your learning by understanding how microcontrollers are used in the Internet of Things (IoT) field.</p> <p>Internet of Things Course</p>"},{"location":"references/#resources-for-teachers-and-mentors","title":"Resources for Teachers and Mentors","text":"<p>CoderDojo Mentor Resources</p>"},{"location":"references/#instructable","title":"Instructable","text":"<p>$25 Robot Platform for Teaching Programming - March 22nd 2017</p>"},{"location":"robot-description/","title":"Robot Description","text":""},{"location":"robot-description/#description-of-the-base-stem-robot","title":"Description of the Base STEM Robot","text":"<p>The base STEM robot has the following descriptive text.  This text is important because it is used as a \"seed\" to generate lesson plans about the robot.</p> <pre><code>The STEM Robot is a low-cost but fun robot designed to teach kids\nthe principles of computational thinking.  It is built around the\nRaspberry Pi RP2040 microcontrollers and is programed with MicroPython.\nIt is designed to cost under $19.\n\nThe base STEM robot has the following parts:\n\n1. 2x 6-volt DC hobby motors with wires pre-soldered\n2. 4x AA batteries in a battery pack with wires\n3. A \"Smart Car\" chassis that parts are mounted to with screws\n4. A Cytron Maker Pi RP2040 robotics board that\nincludes:\n    1. 2x DC motor drivers\n    2. 13x blue GPI statusLEDs\n    3. 2x RGB LED NeoPixels\n    4. a Piezo buzzer with mute switch\n    5. two customizable momentary push buttons\n    6. 7x Grove connectors with four wires\n    7. 4x servo drivers\n    8. a power on switch with a power indicator LED\n    9. 4x red LEDs and buttons to test the motor connections\n    10. a port for charging a LiPo battery\n5. A VL53L0X time-of-flight distance sensor that\nuses the I2C protocol to measure distance\n6. A USB cable for programming the robot from a PC or Mac\n\nThe robot is programmed with the Thonny Integrated\nDevelopment for MicroPython.  Note that the RP2040 is\na dual-core micro-controller with 264K SRAM and 2MB\nflash memory.  The RP2040 includes support for both I2C\nand SPI bus.\n\nThe STEM Robot works with a website that stores lesson plans,\nsample programs and assessments that can be integrated into\na school curriculum and the school's learning management system.\n</code></pre> <p>In the future, we will refer to this block of text as the ROBOT_DESCRIPTION text. If you are generating other courses, you can call this COURSE_DESCRIPTION.</p>"},{"location":"topics/","title":"STEM Robotics Topics","text":"<p>Designing a low-cost STEM robot that runs MicroPython is a fantastic way to teach computational thinking. Here are key concepts you can teach using such a robot:</p>"},{"location":"topics/#programming-concepts","title":"Programming Concepts","text":""},{"location":"topics/#1-basic-programming-concepts","title":"1. Basic Programming Concepts","text":"<ul> <li>Variables: Understanding how to store and manipulate data.</li> <li>Loops: Using <code>for</code> and <code>while</code> loops to repeat actions.</li> <li>Conditionals: Using <code>if</code>, <code>elif</code>, and <code>else</code> to make decisions.</li> <li>Functions: Writing reusable blocks of code.</li> </ul>"},{"location":"topics/#2-computational-thinking-skills","title":"2. Computational Thinking Skills","text":"<ul> <li>Decomposition: Breaking down a complex problem into smaller, more manageable parts.</li> <li>Pattern Recognition: Identifying similarities or patterns in problems.</li> <li>Abstraction: Focusing on important information only, ignoring irrelevant details.</li> <li>Algorithm Design: Creating step-by-step instructions to solve a problem.</li> </ul>"},{"location":"topics/#3-robotics-fundamentals","title":"3. Robotics Fundamentals","text":"<ul> <li>Sensors and Actuators: Understanding how robots perceive their environment and act upon it.<ul> <li>Sensors: Learning how to read data from sensors (e.g., distance, light, temperature).</li> <li>Actuators: Controlling motors, servos, and other actuators.</li> </ul> </li> <li>Control Systems: Using feedback from sensors to adjust actions (closed-loop vs. open-loop systems).</li> </ul>"},{"location":"topics/#4-electronics-basics","title":"4. Electronics Basics","text":"<ul> <li>Circuits: Understanding simple circuits and how they work.</li> <li>Power Management: Managing power supply and battery usage.</li> <li>Interfacing: Connecting different components (e.g., sensors, motors) to the microcontroller.</li> </ul>"},{"location":"topics/#5-engineering-principles","title":"5. Engineering Principles","text":"<ul> <li>Design and Prototyping: Creating and testing designs using iterative processes.</li> <li>Mechanical Design: Basics of building structures, considering weight, balance, and durability.</li> </ul>"},{"location":"topics/#6-problem-solving-skills","title":"6. Problem-Solving Skills","text":"<ul> <li>Debugging: Finding and fixing errors in the code and hardware.</li> <li>Testing and Iteration: Testing designs and making iterative improvements.</li> </ul>"},{"location":"topics/#7-communication-and-collaboration","title":"7. Communication and Collaboration","text":"<ul> <li>Documentation: Writing clear and concise documentation for projects.</li> <li>Collaboration: Working effectively in teams, sharing ideas, and dividing tasks.</li> </ul>"},{"location":"topics/#8-data-handling-and-analysis","title":"8. Data Handling and Analysis","text":"<ul> <li>Data Collection: Gathering data from sensors.</li> <li>Data Processing: Analyzing and interpreting data to make decisions.</li> <li>Visualization: Displaying data in a meaningful way.</li> </ul>"},{"location":"topics/#9-real-world-applications","title":"9. Real-World Applications","text":"<ul> <li>Automation: Understanding how robots are used in various industries.</li> <li>Ethics: Discussing the ethical implications of robotics and automation.</li> </ul>"},{"location":"topics/#practical-projects","title":"Practical Projects","text":"<ul> <li>Line Following Robot: A robot that follows a line using sensors.</li> <li>Obstacle Avoidance Robot: A robot that navigates around obstacles.</li> <li>Remote-Controlled Robot: A robot controlled via Bluetooth or Wi-Fi.</li> <li>Environment Monitoring Robot: A robot that collects and reports environmental data.</li> </ul>"},{"location":"topics/#resources-and-tools","title":"Resources and Tools","text":"<ul> <li>MicroPython Documentation: Official documentation and tutorials.</li> <li>Educational Kits: Affordable robotics kits like micro:bit, Raspberry Pi Pico, or ESP32-based kits.</li> <li>Online Communities: Forums and groups for sharing ideas and getting help (e.g., Reddit, GitHub).</li> </ul> <p>Integrating these concepts into your curriculum will provide a comprehensive and engaging learning experience for students, equipping them with valuable skills for the future.</p>"},{"location":"topics/#topics-for-a-collision-avoidance-robot","title":"Topics for a collision avoidance robot?","text":"<p>Using a low-cost time-of-flight (ToF) distance sensor for a collision avoidance robot provides a rich set of topics for teaching various STEM concepts. Here is a list of topics you could cover:</p>"},{"location":"topics/#programming-and-computational-thinking","title":"Programming and Computational Thinking","text":"<ol> <li> <p>Sensor Integration</p> <ul> <li>How ToF sensors work and their applications.</li> <li>Reading distance data from the sensor using MicroPython.</li> <li>Interpreting sensor data to make decisions.</li> <li> <p>Algorithm Design</p> </li> <li> <p>Designing algorithms for obstacle detection.</p> </li> <li>Implementing collision avoidance algorithms (e.g., stopping, turning).</li> <li> <p>Control Structures</p> </li> <li> <p>Using conditionals to react to sensor data.</p> </li> <li>Implementing loops for continuous monitoring of obstacles.</li> <li> <p>Functions and Modular Programming</p> </li> <li> <p>Writing functions to encapsulate sensor reading and movement logic.</p> </li> <li>Reusing code for different parts of the robot's behavior.</li> </ul> </li> </ol>"},{"location":"topics/#robotics-and-electronics","title":"Robotics and Electronics","text":"<ol> <li> <p>Basic Robotics Concepts</p> <ul> <li>Understanding the role of sensors and actuators in robotics.</li> <li>Using motors and servos to control the robot's movement.</li> <li> <p>Circuit Design</p> </li> <li> <p>Wiring the ToF sensor and other components to the microcontroller.</p> </li> <li>Ensuring proper power management for all components.</li> </ul> </li> </ol>"},{"location":"topics/#engineering-principles","title":"Engineering Principles","text":"<ol> <li> <p>Design and Prototyping</p> <ul> <li>Creating a chassis that can support the sensor and other components.</li> <li>Prototyping different configurations for optimal sensor placement.</li> <li> <p>Mechanical Design</p> </li> <li> <p>Understanding the physical constraints and limitations of the robot.</p> </li> <li>Designing mechanisms for smooth and efficient movement.</li> </ul> </li> </ol>"},{"location":"topics/#data-handling-and-analysis","title":"Data Handling and Analysis","text":"<ol> <li> <p>Data Collection and Processing</p> <ul> <li>Collecting distance data from the ToF sensor.</li> <li>Filtering and smoothing sensor data to improve reliability.</li> <li> <p>Visualization and Debugging</p> </li> <li> <p>Visualizing sensor data to understand robot behavior.</p> </li> <li>Debugging issues with sensor readings and robot movement.</li> </ul> </li> </ol>"},{"location":"topics/#real-world-applications-and-problem-solving","title":"Real-World Applications and Problem Solving","text":"<ol> <li> <p>Collision Avoidance Strategies</p> <ul> <li>Simple reactive behaviors: stopping and turning away from obstacles.</li> <li>More complex behaviors: path planning and navigation.</li> <li> <p>Testing and Iteration</p> </li> <li> <p>Testing the robot in different environments and scenarios.</p> </li> <li>Iterating on the design and code to improve performance.</li> </ul> </li> </ol>"},{"location":"topics/#advanced-topics","title":"Advanced Topics","text":"<ol> <li> <p>Sensor Fusion</p> <ul> <li>Combining data from multiple sensors for more accurate obstacle detection.</li> <li> <p>Machine Learning (optional)</p> </li> <li> <p>Using machine learning to improve collision avoidance over time.</p> </li> <li>Training models to predict and react to obstacles more effectively.</li> </ul> </li> </ol>"},{"location":"topics/#practical-projects-and-exercises","title":"Practical Projects and Exercises","text":"<ol> <li> <p>Basic Collision Avoidance Robot</p> <ul> <li>Building a simple robot that stops or turns when an obstacle is detected.</li> <li> <p>Maze Navigation</p> </li> <li> <p>Designing a robot that can navigate through a maze using the ToF sensor.</p> </li> <li> <p>Dynamic Obstacle Avoidance</p> </li> <li> <p>Creating a robot that can avoid moving obstacles in real-time.</p> </li> </ul> </li> </ol>"},{"location":"topics/#resources-and-tools_1","title":"Resources and Tools","text":"<ol> <li> <p>MicroPython Libraries</p> <ul> <li>Exploring libraries and modules available for ToF sensors.</li> <li> <p>Simulation Tools</p> </li> <li> <p>Using simulation environments to test and refine collision avoidance algorithms before deploying them on the physical robot.</p> </li> </ul> </li> </ol> <p>By covering these topics, students will gain a comprehensive understanding of how to use ToF sensors for collision avoidance in robotics, while also learning valuable programming, electronics, and engineering skills.</p> <p>2/2</p>"},{"location":"gallery/","title":"Gallery of Robots","text":""},{"location":"gallery/#2023","title":"2023","text":""},{"location":"gallery/#2022","title":"2022","text":""},{"location":"gallery/#2019","title":"2019","text":""},{"location":"gallery/#2017","title":"2017","text":""},{"location":"kits/adjust/","title":"Adjustabot","text":"<p>This robot allows the parameters of collision avoidance to be adjusted by turning knobs.  You can effectively \"program\" this robot to change its behavior by adjusting parameters such as:</p> <ol> <li>Motor power - which determines the speed</li> <li>Distance threshold - which changes when a robot turns</li> <li>Turn time - which changes that angle of turn after a collision</li> </ol> <p>This robot is ideal for projects that don't have a lab of PCs that are used to customize a robot's program.</p>"},{"location":"kits/adjust/#parts-list","title":"Parts List","text":"<p>We start with our Display robot and add three potentiometers that can be adjusted to change the parameters.</p>"},{"location":"kits/base/","title":"Base Robot","text":"<p>This is our classic low-cost robot that can be purchased for around $19 each and can be assembled without any soldering.  It is built on the powerful [Cytron Maker Pi RP2040] board that is programmed by the same software that powers the Raspberry Pi Pico.</p> <p>MicroPython for Kids</p>"},{"location":"kits/bump-switch/","title":"Bump Switch Robot","text":"<p>https://www.coderdojotc.org/micropython/kits/maker-pi-rp2040-robot/23-microswitch-bot/</p>"},{"location":"kits/line-follower/","title":"Line Follower Robot","text":"<ul> <li>Line Followeer Robot on the MicroPython for Kids Site</li> </ul>"},{"location":"kits/ultrasonic/","title":"Ultrasonic Robot","text":"<p>Ultrasonic Robot on the MicroPython for Kids Site</p>"},{"location":"lessons/","title":"Sample Lessons for STEM Robots","text":""},{"location":"lessons/#base-lessons","title":"Base Lessons","text":"<p>Our base lessons target 9th-grade students.  At the end of lessons, you will find a list of Challenges for more advanced students. You will also find links to other lesson plans that target older or younger students.  If you don't find the grade level you need, you can use generative AI programs such as ChatGPT to customize the lesson plans to a new grade level.</p>"},{"location":"lessons/#using-generative-ai-to-customize-lessons","title":"Using Generative AI to Customize Lessons","text":"<pre><code>Given this lesson plan, generate a new lesson \nplan for a 7th grade robotics class.\n</code></pre>"},{"location":"lessons/03-robot-parts/","title":"Robot Parts","text":"<p>What are the key parts of a robot?  In our first lessons we will review the key components of a robot and how they </p>"},{"location":"lessons/03-robot-parts/#batteries","title":"Batteries","text":""},{"location":"lessons/03-robot-parts/#motors","title":"Motors","text":""},{"location":"lessons/03-robot-parts/#sensors","title":"Sensors","text":""},{"location":"lessons/03-robot-parts/#displays","title":"Displays","text":""},{"location":"lessons/03-robot-parts/#microcontrollers","title":"Microcontrollers","text":""},{"location":"lessons/05-batteries/","title":"STEM Robot Batteries","text":"<p>The standard STEM robot kit comes with a battery pack that holds 4 AA batteries.  We will review this strategy and discuss rechargeable options.</p>"},{"location":"lessons/05-batteries/#4-aa-batteries","title":"4 AA Batteries","text":""},{"location":"lessons/05-batteries/#rechargeable-lipo-batteries","title":"Rechargeable LiPo Batteries","text":""},{"location":"lessons/05-batteries/#18650-batteries","title":"18650 Batteries","text":""},{"location":"lessons/10-dc-motors/","title":"Lesson Using 6-Volt DC Hobby Motors","text":""},{"location":"lessons/10-dc-motors/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a lesson plan using two 6-volt DC hobby\nmotors with wheels for a 5th grade\nclassroom that is interested in building robots.\nAssume you have a battery pack of 3 AA batteries,\nwires, and a glue gun.\n</code></pre>"},{"location":"lessons/10-dc-motors/#sample-response","title":"Sample Response","text":""},{"location":"lessons/10-dc-motors/#lesson-plan-building-a-simple-robot-with-dc-motors","title":"Lesson Plan: Building a Simple Robot with DC Motors","text":""},{"location":"lessons/10-dc-motors/#objective","title":"Objective:","text":"<p>Students will learn about basic electronics and robotics by building a simple robot using DC motors and a battery pack.</p>"},{"location":"lessons/10-dc-motors/#materials","title":"Materials:","text":"<ul> <li>2 DC motors (as shown in the image)</li> <li>1 battery pack for 3 AA batteries</li> <li>3 AA batteries</li> <li>2 wheels (one attached to each motor)</li> <li>Chassis (can be a small plastic container or cardboard)</li> <li>Electrical tape and/or heat shrink tubing</li> <li>Small switch (optional)</li> <li>Connecting wires</li> <li>Hot glue gun and glue sticks</li> <li>Screwdriver</li> <li>Scissors or wire cutters</li> </ul> <p>Duration: About 2 hours</p>"},{"location":"lessons/10-dc-motors/#lesson-steps","title":"Lesson Steps:","text":"<p>1. Introduction to DC Motors and Robotics (15 minutes)</p> <ul> <li>Explain what a DC motor is and how it works.</li> <li>Discuss how robots use motors to move.</li> <li>Show examples of simple robots (videos or images).</li> </ul> <p>2. Safety Briefing (5 minutes)</p> <ul> <li>Explain the importance of safety when working with batteries and hot glue.</li> <li>Demonstrate how to safely use the hot glue gun.</li> </ul> <p>3. Building the Robot (90 minutes)</p>"},{"location":"lessons/10-dc-motors/#step-1-prepare-the-motors","title":"Step 1: Prepare the Motors","text":"<ul> <li>Attach a wheel to each motor securely.</li> <li>Connect wires to the motor terminals if not already connected. Red wire to one terminal and black (or blue) to the other.</li> </ul>"},{"location":"lessons/10-dc-motors/#step-2-construct-the-chassis","title":"Step 2: Construct the Chassis","text":"<ul> <li>Use a small plastic container or piece of cardboard as the base.</li> <li>Attach the motors to the bottom of the chassis using hot glue, making sure the wheels can rotate freely.</li> </ul>"},{"location":"lessons/10-dc-motors/#step-3-connect-the-motors-to-the-battery-pack","title":"Step 3: Connect the Motors to the Battery Pack","text":"<ul> <li>Attach the battery pack to the top of the chassis using hot glue or tape.</li> <li>Connect the red wire from each motor to the red wire from the battery pack.</li> <li>Connect the black wire from each motor to the black wire from the battery pack.</li> <li>Optionally, include a switch between the battery pack and the motors to turn the robot on and off.</li> </ul>"},{"location":"lessons/10-dc-motors/#step-4-test-the-robot","title":"Step 4: Test the Robot","text":"<ul> <li>Insert the AA batteries into the battery pack.</li> <li>Turn on the switch (if included) and observe the robot move.</li> <li>If the robot doesn't move, check the connections and ensure the batteries are inserted correctly.</li> </ul>"},{"location":"lessons/10-dc-motors/#step-5-customize-the-robot","title":"Step 5: Customize the Robot","text":"<ul> <li>Allow students to decorate their robots with markers, stickers, or other craft supplies.</li> <li>Encourage students to experiment with different chassis designs and motor placements.</li> </ul>"},{"location":"lessons/10-dc-motors/#wrap-up-and-discussion-10-minutes","title":"Wrap-Up and Discussion (10 minutes)**","text":"<ul> <li>Ask students to share their experiences building the robot.</li> <li>Discuss what they learned about motors and robotics.</li> <li>Talk about potential improvements and modifications they could make to their robots.</li> </ul> <p>5. Clean-Up (10 minutes)</p> <ul> <li>Ensure all materials are put away properly.</li> <li>Make sure the classroom is tidy and free of any hazards.</li> </ul>"},{"location":"lessons/10-dc-motors/#additional-resources","title":"Additional Resources:","text":"<ul> <li>Provide links to simple robotics projects and tutorials.</li> <li>Suggest books or websites for further reading on robotics and electronics.</li> </ul>"},{"location":"lessons/10-dc-motors/#assessment","title":"Assessment:","text":"<ul> <li>Observe students during the activity to ensure they are following instructions and working safely.</li> <li>Assess the functionality of each student's robot.</li> <li>Encourage students to explain how their robot works and what they learned from the activity.</li> </ul> <p>This lesson plan aims to provide a hands-on, engaging introduction to robotics and electronics, suitable for 5th-grade students.</p>"},{"location":"lessons/15-motor-direction/","title":"Motor Direction Lab","text":"<p>In this lesson, we want to make a motor go both forward and reverse.</p> <p>For an example simulation, see the H-Bridge Simulation.</p>"},{"location":"lessons/15-motor-direction/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a lesson plan for a 5th grade class that is interested in\nlearning how to make a robot move forward and backward.\nAssume the students have access to a 6-volt DC hobby motors,\nwheels, switches, and a battery pack with 3 AA batteries.\nGenerate a lesson plan that will get the students to learn how to connect\nthe battery so that the motors go forward or reverse.\n</code></pre>"},{"location":"lessons/15-motor-direction/#lesson-plan-making-a-robot-move-forward-and-backward","title":"Lesson Plan: Making a Robot Move Forward and Backward","text":""},{"location":"lessons/15-motor-direction/#objective","title":"Objective:","text":"<p>By the end of the lesson, students will understand the basics of connecting a battery to motors to make a robot move forward and backward.</p>"},{"location":"lessons/15-motor-direction/#materials","title":"Materials:","text":"<ul> <li>6-volt DC hobby motors</li> <li>Wheels compatible with the motors</li> <li>Switches (DPDT or SPDT)</li> <li>Battery pack with 3 AA batteries</li> <li>Connecting wires</li> <li>Screwdrivers</li> <li>Electrical tape</li> <li>Small robot chassis (optional)</li> <li>Whiteboard and markers</li> <li>Handouts with circuit diagrams and instructions</li> </ul> <p>Duration: 1 hour</p>"},{"location":"lessons/15-motor-direction/#lesson-breakdown","title":"Lesson Breakdown:","text":""},{"location":"lessons/15-motor-direction/#introduction-10-minutes","title":"Introduction (10 minutes)","text":""},{"location":"lessons/15-motor-direction/#greeting-and-introduction","title":"Greeting and Introduction","text":"<ul> <li>Welcome the students and introduce the topic: \"Today, we will learn how to make a simple robot move forward and backward using motors, switches, and a battery pack.\"</li> <li>Briefly explain what each component does: motors convert electrical energy into motion, switches control the direction, and the battery pack provides power.</li> </ul>"},{"location":"lessons/15-motor-direction/#explanation-and-demonstration-15-minutes","title":"Explanation and Demonstration (15 minutes)","text":"<ol> <li> <p>Basic Circuit Concepts</p> </li> <li> <p>Explain the basic concept of an electrical circuit.</p> </li> <li> <p>Show how connecting the battery pack to the motor makes it spin.</p> </li> <li> <p>Direction Control with Switches</p> </li> <li> <p>Explain how switches can change the direction of the motor.</p> </li> <li>Demonstrate using a Double Pole Double Throw (DPDT) switch or a Single Pole Double Throw (SPDT) switch.</li> </ol>"},{"location":"lessons/15-motor-direction/#hands-on-activity-30-minutes","title":"Hands-On Activity (30 minutes)","text":"<ol> <li> <p>Building the Circuit</p> </li> <li> <p>Divide the students into small groups and distribute the materials.</p> </li> <li> <p>Provide step-by-step instructions on how to connect the components:</p> </li> <li> <p>Connecting the Motors and Wheels:</p> <ul> <li>Attach the wheels to the motors.</li> </ul> </li> <li>Connecting the Battery Pack:<ul> <li>Connect the battery pack to the motor terminals using connecting wires.</li> </ul> </li> <li>Adding the Switch:<ul> <li>Connect the switch between the battery pack and the motors.</li> <li>Show how flipping the switch changes the motor's direction, making the robot move forward or backward.</li> </ul> </li> </ol>"},{"location":"lessons/15-motor-direction/#testing-and-troubleshooting","title":"Testing and Troubleshooting","text":"<ul> <li>Allow students to test their connections.</li> <li>Encourage them to troubleshoot and correct any issues, such as loose connections or incorrect wiring.</li> <li>Walk around the room to assist and answer questions.</li> </ul>"},{"location":"lessons/15-motor-direction/#conclusion-5-minutes","title":"Conclusion (5 minutes)","text":"<ol> <li> <p>Review and Reflect</p> <ul> <li>Recap the key points: how to connect the battery to the motors, how switches control the direction, and the importance of secure connections.</li> <li>Ask students to share what they learned and any challenges they faced.</li> </ul> </li> <li> <p>Preview of Next Lesson</p> </li> <li> <p>Briefly introduce what they will learn next (e.g., changing motor speed, adding more controls, using sensors, programming the robot).</p> </li> </ol>"},{"location":"lessons/15-motor-direction/#handouts","title":"Handouts:","text":"<ul> <li>Simple circuit diagram showing the battery pack, motors, and switch connections.</li> <li>Step-by-step instructions with illustrations.</li> <li>Troubleshooting tips.</li> </ul> <p>This lesson plan should help 5th graders understand the basics of building a simple robot and controlling its movement.</p>"},{"location":"lessons/15-motor-direction/#h-bridge","title":"H-Bridge","text":""},{"location":"lessons/15-motor-direction/#lesson-plan-using-an-h-bridge-circuit-to-change-motor-direction","title":"Lesson Plan: Using an H-Bridge Circuit to Change Motor Direction","text":""},{"location":"lessons/15-motor-direction/#objective_1","title":"Objective:","text":"<p>By the end of the lesson, students will understand how to use  an H-Bridge circuit with four Single Pole Single Throw (SPST) switches to change the direction of a motor.</p>"},{"location":"lessons/15-motor-direction/#materials_1","title":"Materials:","text":"<ul> <li>Web-based simulation of the H-Bridge circuit</li> <li>Computers with internet access</li> <li>Whiteboard and markers</li> <li>Handouts with H-Bridge circuit diagrams and instructions</li> </ul> <p>Duration: 1 hour</p>"},{"location":"lessons/15-motor-direction/#lesson-breakdown_1","title":"Lesson Breakdown:","text":""},{"location":"lessons/15-motor-direction/#introduction-10-minutes_1","title":"Introduction (10 minutes)","text":"<ol> <li>Greeting and Introduction<ul> <li>Welcome the students and introduce the topic: \"Today, we will learn how to use an H-Bridge circuit to control the direction of a motor using four SPST switches.\"</li> <li>Explain what an H-Bridge is and its importance in controlling motor direction.</li> </ul> </li> </ol>"},{"location":"lessons/15-motor-direction/#explanation-and-demonstration-15-minutes_1","title":"Explanation and Demonstration (15 minutes)","text":"<ol> <li> <p>Basic Concept of H-Bridge</p> </li> <li> <p>Explain the basic concept of an H-Bridge circuit: it allows a voltage to be applied across a load in either direction.</p> </li> <li> <p>Draw the H-Bridge diagram on the whiteboard and label each part: four switches (S1, S2, S3, S4), motor (M), and power source (V).</p> </li> <li> <p>How H-Bridge Works</p> <ul> <li>Explain the different states of the switches to change the motor direction:<ul> <li>Forward: S1 and S4 are closed, S2 and S3 are open.</li> <li>Reverse: S2 and S3 are closed, S1 and S4 are open.</li> <li>Stop: All switches are open or opposing switches are closed (S1 and S2 or S3 and S4).</li> </ul> </li> <li>Demonstrate these states using the web-based simulation.</li> </ul> </li> </ol>"},{"location":"lessons/15-motor-direction/#hands-on-activity-30-minutes_1","title":"Hands-On Activity (30 minutes)","text":"<ol> <li> <p>Setting Up the Simulation</p> </li> <li> <p>Guide students to open the web-based simulation tool on their computers.</p> </li> <li> <p>Provide step-by-step instructions to set up the H-Bridge circuit in the simulation:</p> <ol> <li>Creating the Circuit:<ul> <li>Place the motor, power source, and four SPST switches in the simulation.</li> </ul> </li> <li>Wiring the Circuit:<ul> <li>Connect the components to form an H-Bridge circuit as shown in the diagram.</li> </ul> </li> <li>Testing the Circuit:<ul> <li>Simulate closing different combinations of switches to see how the motor direction changes.</li> </ul> </li> </ol> </li> <li> <p>Exploration and Experimentation:</p> </li> <li> <p>Allow students to experiment with the circuit in the simulation.</p> </li> <li>Encourage them to try different combinations of switch states and observe the motor's behavior.</li> <li>Walk around the room to assist and answer questions.</li> </ol>"},{"location":"lessons/15-motor-direction/#conclusion-5-minutes_1","title":"Conclusion (5 minutes)","text":"<ol> <li> <p>Review and Reflect</p> </li> <li> <p>Recap the key points: how an H-Bridge circuit works, the role of SPST switches, and how to control motor direction.</p> </li> <li> <p>Ask students to share their observations and any challenges they faced during the simulation.</p> </li> <li> <p>Preview of Next Lesson</p> </li> <li> <p>Briefly introduce what they will learn next lesson.  Discuss the need to control both the direction and speed of a motor.</p> </li> </ol>"},{"location":"lessons/15-motor-direction/#handouts_1","title":"Handouts:","text":"<ul> <li>H-Bridge circuit diagram showing the motor, power source, and four SPST switches or a single DPDT switch.</li> <li>Step-by-step instructions with illustrations for setting up the circuit in the simulation.</li> <li>Troubleshooting tips for common issues in the simulation.</li> </ul> <p>This lesson plan should help 5th graders understand the concept and application of an H-Bridge circuit for motor control using simulations.</p>"},{"location":"lessons/16-h-bridge/","title":"H-Bridge Lab","text":"<p>The H-bridge circuit allows us to make a motor turn in opposite directions if we close opposite switches.  To make the motor move one direction we close the upper left (Switch 1) and the lower right (Switch 4) switches.  To make the motor move in the opposite direction we close the lower left (Switch 2) and upper right (Switch 3) switches.</p> <p>It is called an \"H\" bridge because the circuit forms the shape of the letter \"H\".</p> <p></p> <p>In the figure above:</p> <ol> <li>To move forward, close switches 1 and 4</li> <li>To move in reverse, close switches 2 and 3</li> </ol> <p>This circuit can also be demonstrated by using a single double-pole, double throw switch.</p> <p></p>"},{"location":"lessons/20-motor-speed/","title":"Controlling Motor Speed","text":""},{"location":"lessons/20-motor-speed/#battery-voltage","title":"Battery Voltage","text":""},{"location":"lessons/20-motor-speed/#adjusting-a-potentiometer","title":"Adjusting a Potentiometer","text":""},{"location":"lessons/25-pwm/","title":"Pulse Width Modulation Lab","text":""},{"location":"lessons/30-testing-motor-connections/","title":"Testing Motor Connections","text":""},{"location":"lessons/35-dance/","title":"Making Your Robot Dance","text":""},{"location":"lessons/40-i2c-bus/","title":"The I2C Bus","text":""},{"location":"lessons/40-i2c-bus/#the-i2c-scanner","title":"The I2C Scanner","text":""},{"location":"lessons/40-i2c-bus/#testing-for-your-sensor","title":"Testing For Your Sensor","text":""},{"location":"lessons/45-sensors/","title":"Sensors","text":"<ol> <li>Bump sensors - microswitches</li> <li>IR Sensors - Infrared distance sensors</li> <li>Ultrasonic Sensors - using sound to measure distance</li> <li>Time of Flight Sensors - our favorite sensor</li> <li>LIDAR - high end sensors for moving robots</li> </ol>"},{"location":"lessons/50-tof-sensors/","title":"The Time of Flight Sensor","text":"<p>In this lab, we will learn how to use a powerful low-cost Time-of-Flight sensor.</p>"},{"location":"lessons/60-ir-sensors/","title":"IR Distance Sensors","text":""},{"location":"setup/","title":"STEM Robots","text":""},{"location":"setup/05-thonny-installation/","title":"Thonny Setup","text":""},{"location":"setup/10-base-kit-assembly/","title":"Base Kit Assembly","text":""},{"location":"setup/10-base-kit-assembly/#assembling-your-maker-pi-rp2040-robot","title":"Assembling Your Maker Pi RP2040 Robot","text":"<p>This kit is a $25 robot kit that we will use in our CoderDojo robotics classes.  This kit includes:</p> <ol> <li>A SmartCar Chassis<ol> <li>Two 3 to 6-volt DC geared hobby motors and wheels</li> <li>Plexiglass (acrylic) main-board</li> <li>Screws and nuts</li> <li>4 AA battery pack</li> <li>Power switch</li> </ol> </li> <li>Cytron Maker Pi RP2040 kit<ol> <li>Maker Pi RP2040 board</li> <li>4x Grove to female header cables</li> <li>Screwdriver</li> <li>Silicone rubber feet (pack of 4)</li> </ol> </li> <li>Ultrasonic sensor<ol> <li>mounting bracket</li> <li>2 M2 6mm screws and nuts</li> </ol> </li> </ol> <p>You will need to provide 4 AA batteries and a Micro USB connector that works with your PC or Mac.</p>"},{"location":"setup/10-base-kit-assembly/#assemble-the-smartcar-chassis","title":"Assemble the SmartCar Chassis","text":"<p>Robot configured with Time-of-Flight distance sensor.</p> <p></p> <p>Here is the bottom view of the robot with the batteries mounted on the bottom. </p> <p>In this version of the kit, the wires are pre-soldered onto the motors.</p>"},{"location":"setup/10-base-kit-assembly/#parts-in-packages","title":"Parts in Packages","text":"<p>Here is the robot kit in all the packaging: </p>"},{"location":"setup/10-base-kit-assembly/#parts-check","title":"Parts Check","text":"<p>Your first task is to remove the protective backing from the Plexiglass body. </p> <p>Here are all the parts removed from the packaging: </p>"},{"location":"setup/10-base-kit-assembly/#exploded-view","title":"Exploded View","text":"<p>Here is an exploded view showing how the motors are connected: </p>"},{"location":"setup/10-base-kit-assembly/#wires-on-motors","title":"Wires on Motors","text":"<p>We mount the motors with the wires on the inside and the heads of the bolts on the outside. </p> <p>This photo shows cable ties I have added so that the wires don't get pulled out by our students.  These cable ties are optional.</p> <p></p>"},{"location":"setup/10-base-kit-assembly/#battery-pack-on-bottom","title":"Battery Pack on Bottom","text":"<p>We like to mount the battery pack on the bottom.  This leaves more room on the top for customization and a breadboard.</p> <p>Next, we position the battery pack on the BOTTOM so  that we have more room on the top for our circuit board,  sensors and add-on displays.</p> <p>The rear of the robot with battery pack mounted.</p> <p></p> <p></p> <p></p>"},{"location":"setup/10-base-kit-assembly/#mounting-the-drag-wheel","title":"Mounting the Drag Wheel","text":"<p>Next, we put the four screws and spacers in the four holes at the  bottom rear of the robot directly behind the battery pack.</p> <p>We then add the four screws to mount the drag wheel.</p> <p>Standoffs</p> <p></p> <p>Drag Wheel on Standoffs</p> <p></p> <p>Next, line up the printed circuit board with the USB connector facing the rear.  Note where the holes are in the board and drill two 1/8\" holes to mount the board.</p> <p></p> <p>I used a 1/8th inch drill bit to put holes where the battery pack should be mounted.</p> <p>Next, I put the flat-head screws in the battery pack.  We want to make sure the top of the screw is all the way in so that it does not get in the way of the battery.</p>"},{"location":"setup/10-base-kit-assembly/#optional-power-switch","title":"Optional Power Switch","text":"<p>The Cytron board has its own power switch.  So this switch does not need to be used.</p> <p></p>"},{"location":"setup/10-base-kit-assembly/#mounting-cytron-board","title":"Mounting Cytron Board","text":"<p>Next, we mount the rubber feet on the bottom of the Maker Pi RP2040 circuit board so that we have some space between the PC board and the main chassis.  I use the space next to the four corners to mount the feet.  Note that we must put the drag wheel on before we put the PC board on top of the chassis.</p> <p>Now is a good time to check the spacing of the battery pack and the read drag wheel.  The rear drag wheel must be able to spin freely in a full circle without bumping into the battery.  If it bumps you might need to remount the battery pack before you proceed to the next step.</p> <p>This figure has the switch that comes with the battery pack.  For our work, we will not need this switch since the Maker Pi RP2040 circuit board has an no-board power switch.  Most of our students put the switch in if they ever need to change circuit boards that don't have a built-in power switch.  If you do this, you can solder the switch between the red power of the battery and the positive terminal of VIN.</p> <p>This photo shows the holes drilled with the screws in them.</p> <p>This is the side view from the rear of the screws holding on the circuit board. </p> <p>Next use two 6 mm M3 screws to mount the ultrasonic distance sensor on top front of the robot.</p> <p>Some of our students like to mount the ultrasonic sensor under the chassis and point the sensor up a little so the sensor does not reflect off the floor.  You can use a heat gun to soften the plastic mount to change the angle.</p> <p>Next, I added a drop of hot glue under the front screws that mount the pc board.  I did this because the battery pack and motor mounts get in the way of adding a nut under the board.</p> <p>I used a small rubber-coated twist tie to keep the wires under the robot away from the wheels and battery.  We don't want them to drag on the floor.</p> <p>Next, we connect the motors to the screw headers on the printed circuit board.  There is a screwdriver that comes with the Cytron Maker Pi RP2040 that is handy for tightening the screws.</p> <p>Don't worry about getting the connections all correct.  They can be adjusted in your software.</p> <p>Press the wheels on the motors.</p> <p>Lastly, we connect the battery to the VIN jumper, making sure to connect the red wire to the \"+\" terminal and the black wire to the \"-\" terminal.</p> <p>Connect the Maker Pi RP2040 board to the top with the USB connector facing the rear.</p> <p>Next, we put the four screws and spacers in the four holes at the  bottom rear of the robot directly behind the battery pack.</p>"},{"location":"setup/10-base-kit-assembly/#motor-and-power-connections","title":"Motor and Power Connections","text":"<p>Connections of the two DC motors and 4AA battery pack: </p> <p>LiPi battery connection: </p>"},{"location":"setup/10-base-kit-assembly/#wire-management","title":"Wire Management","text":"<p>We then add the four screws to mount the drag wheel.</p> <p>Here is a short video of the assembly of a SmartCar Chassis.  Note that this video puts the battery on the top, where we put it on the bottom.</p> <p>There are many videos online how to assemble to motors to the chassis.  The trick is orienting the motors correctly and making sure the bolts don't get in the way of the wheels.</p>"},{"location":"setup/20-parts-list/","title":"Purchasing Your Own Parts","text":"<p>Many schools have received sample kits from our programs. But you can buy your own parts and assemble your own kits.</p>"},{"location":"setup/20-parts-list/#2wd-smart-car-kit","title":"2WD \"Smart Car\" Kit","text":"<p>There are many \"Smart Car\" kits available online retailers such as eBay, Amazon and Walmart. Purchasing these kits in quantity 10 or more can help you save on shipping costs.</p> <p>Note that these kits often come with two black circular wheel encoders.  We do not use these parts and they can be discarded.  We also do not use the power switch since the Cytron board has its own power switch.</p> <p>Our preferred vendor is the Cytron 2WD Smart Robot Car Chassis at $4.80.</p> <p>We like the Cytron kit because the motors come with the wires soldered in place.  We also use a small cable tie to keep the wires from breaking off.  These kits frequently come with a small screwdriver for tightening the screws.</p> <p>Note that the prices for these kits vary widely, so be careful what you purchase.</p>"},{"location":"setup/20-parts-list/#cytron-motor-control-board","title":"Cytron Motor Control Board","text":"<p>There are many robotics controllers available that can be programmed with MicroPython. But the one from Cytron stands out as having all the features we need for our STEM Robot, and at $12.00 it is a great value.</p> <p>Our Review of the Cytron Maker Pi RP2040 Board on Medium</p> <p>Cytron Maker Pi RP2040 Board</p> <ol> <li>Powered by Raspberry Pi RP2040 MicroController<ol> <li>Dual-core Arm Cortex-M0+ processor</li> <li>264KB internal RAM</li> <li>2MB of Flash memory</li> </ol> </li> <li>4x Servo motors</li> <li>2x DC motors with quick test buttons</li> <li>Versatile power circuit</li> <li>Automatic power selection: USB 5V, LiPo (1-cell) or Vin (3.6-6V)</li> <li>Built-in 1-cell LiPo/Li-Ion charger (over-charged &amp; over-discharged protection)</li> <li>Power on/off switch</li> <li>13x Status indicator LEDs for GPIO pins</li> <li>1x Piezo buzzer with mute switch</li> <li>2x Push button</li> <li>2x RGB LED (Neopixel Compatible)</li> <li>7x Grove ports (flexible I/O options: digital, analog, I2C, SPI, UART...)</li> <li>6x M3 screw hole</li> </ol> <p>The Cytron board comes with a screwdriver and four rubber mounting tabs.</p>"},{"location":"setup/20-parts-list/#cytron","title":"Cytron","text":"<p>Cytron Maker Pi RP2040</p>"},{"location":"setup/20-parts-list/#digikey","title":"Digikey","text":"<p>Maker Pi RP2040 Board - listed for $11</p>"},{"location":"setup/20-parts-list/#adafruit","title":"Adafruit","text":"<p>Adafruit $14.90</p>"},{"location":"setup/20-parts-list/#time-of-flight-distance-sensor","title":"Time of Flight Distance Sensor","text":"<p>VL53L0X Time-of-Flight Laser Ranging Module IR Distance Sensor</p> <p>The VL53L0X is a low-cost ($5) time-of-flight light-based distance sensor that is easy to use. It comes packaged in an I2C board and gives precise distance measurements up to 1.5 meters away. It measures the time that light pulses take to travel to an object and back to estimate distance. Light travels about 1 foot every nanosecond, so the timing inside this little chip must be very accurate.</p> <p>The VL53L0X integrates a group of Single Photon Avalanche Diodes (SPAD) and embeds ST Electronic's second generation FlightSense\u2122 patented technology. The VL53L0X\u2019s 940 nm emitter Vertical Cavity Surface-Emitting Laser (VCSEL), is safe for kids and totally invisible to the human eye. Coupled with internal physical infrared filters, the sensor enables longer-ranging distances, higher immunity to ambient light, and better robustness to cover glass optical crosstalk.</p> <p>Review and 3D Printed Mount</p>"},{"location":"setup/20-parts-list/#m3-bolts-and-nuts","title":"M3 Bolts and Nuts","text":"<p>We use M3 metric screws for mounting the Cytron board to the back of the chassis and mounting the time-of-flight sensor to the front of the robot.  We use 4x 10 mm screws on the Cytron board and 2x 6mm screws for the time-fight sensor.</p> <p>eBay M3 pan head bolts</p> <p>M3 STAINLESS HEX FULL NUTS QTY 100 PACK $6 US</p>"},{"location":"setup/30-tof-sensor/","title":"Time of Flight Distance Sensor","text":""},{"location":"sims/collision-avoidence/","title":"Collision Avoidance Robot","text":"![Image Name](./collision-avoidance-robot.png){ width=\"400\" }    Collision Avoidance Robot <p>Link to Collision Avoidance Demo</p> <p>Edit MicroSim</p>"},{"location":"sims/collision-avoidence/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a p5.js simulation of a collision avoidance robot on a 400x400 canvas.\nThe robot moves in a circle of radius 200 which is centered in the canvas.\nThe robot is drawn as blue filled rectangle 40x40 with a 20 long red line\npointing at the front.\nThe robot has four modes: stopped, forward, backing up a turning.\nThere are three buttons at the bottom of the drawing region: Start, Stop\nand Reset.\nThe initial state is stopped.  Place the robot in the center facing right.\nWhen the user presses Start the robot goes into forward mode.\nWhen the robot comes within 20 of the edge of the circle it will\nbackup 20 and then turn.\nThe turn will be 120 degrees either right or left.\nAfter the robot turns it will then go forward.\nWhen the user presses Stop the mode will be stopped.\nWhen the user presses Reset the robot will be placed stopped\nat the center of the canvas.\n</code></pre>"},{"location":"sims/h-bridge/","title":"H-Bridge Circuit","text":"<p>An H-bridge circuit is four switches around a motor in the shape of the letter \"H\". The motor is at the center of the letter \"H\". When the upper-left and lower-right switches are closed, the motor spins one direction. When the lower-left and upper-right switches are closed, the motor spins in the opposite direction.</p> <p></p> <p>H-Bridge Demo</p> <pre><code>Generate a single p5.js sketch file.\n\nDraw an H-bridge circuit for reversing the direction of a DC motor.\n\nHave three state buttons for \"Forward\", \"Stop\" and \"Reverse\".\nPlace the positive power rail at the top of the circuit.\nPlace the negative rail at the bottom of the circuit.\nPlace the motor in the center of the H-brige ciricut.\nAnimate the motor moving clockwise for the Forward state.\nAnimate the motor going counter-clockwise for the Reverse state.\nMake the motor stopped for the Stop state.\nHave the upper left and lower right wires animate current for the Forward state.\nHave the upper right and lower left wires animate current for the Reverse state.\nTurn off all wire animation for the Stop state.\n\nCreate four knife switches.\nHave the upper left and lower right be closed for Forward.\nHave the upper right and lower left be closed for Reverse.\nHave all the switches be open for Stop.\n\nUse the following function to draw current in a wire:\n\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\n    if (state) {\n        let distance = dist(x1, y1, x2, y2);\n        let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n        // lerp generates the percent between two values\n        let x = lerp(x1, x2, circlePos);\n        let y = lerp(y1, y2, circlePos);\n\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2); // Draw the wire\n\n        fill(255, 0, 0);\n        noStroke();\n        circle(x, y, 10); // Draw the moving circle (electron)\n    } else {\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2); // Draw the wire\n    }\n}\n</code></pre>"},{"location":"sims/h-bridge/#response","title":"Response","text":"<p>Sure! Here's a p5.js sketch file that implements the H-bridge circuit with state buttons for \"Forward,\" \"Stop,\" and \"Reverse\":</p> <pre><code>let forwardButton;\nlet stopButton;\nlet reverseButton;\n\nconst lineWidth = 2;\n\nfunction setup() {\ncreateCanvas(400, 400);\n\nforwardButton = createButton('Forward');\nforwardButton.position(10, 10);\nforwardButton.mousePressed(forward);\n\nstopButton = createButton('Stop');\nstopButton.position(90, 10);\nstopButton.mousePressed(stop);\n\nreverseButton = createButton('Reverse');\nreverseButton.position(150, 10);\nreverseButton.mousePressed(reverse);\n}\n\nfunction forward() {\n// Code to control the H-bridge for forward motion\n}\n\nfunction stop() {\n// Code to stop the motor\n}\n\nfunction reverse() {\n// Code to control the H-bridge for reverse motion\n}\n\nfunction draw() {\nbackground(220);\n\n// Draw positive power rail\nstroke(0);\nstrokeWeight(lineWidth);\nline(40, 60, width - 40, 60);\n\n// Draw negative power rail\nstroke(0);\nstrokeWeight(lineWidth);\nline(40, height - 60, width - 40, height - 60);\n\n// Draw H-bridge circuit\nstroke(0);\nstrokeWeight(lineWidth);\nline(width / 2 - 40, 60, width / 2 - 40, height - 60);\nline(width / 2 + 40, 60, width / 2 + 40, height - 60);\nline(width / 2 - 40, height / 2, width / 2 + 40, height / 2);\n\n// Draw motor\nnoFill();\nstroke(0);\nstrokeWeight(lineWidth);\nrect(width / 2 - 20, height / 2 - 20, 40, 40);\n\n// Draw wires with current\nlet speed1 = 0.01;\ndrawAnimatedWire(40, 60, width / 2 - 40, 60, speed1, forwardButton.elt.disabled);\ndrawAnimatedWire(width / 2 + 40, 60, width - 40, 60, speed1, reverseButton.elt.disabled);\ndrawAnimatedWire(40, height - 60, width / 2 - 40, height - 60, speed1, reverseButton.elt.disabled);\ndrawAnimatedWire(width / 2 + 40, height - 60, width - 40, height - 60, speed1, forwardButton.elt.disabled);\n}\n\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\nif (state) {\nlet distance = dist(x1, y1, x2, y2);\nlet circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n// lerp generates the percent between two values\nlet x = lerp(x1, x2, circlePos);\nlet y = lerp(y1, y2, circlePos);\n\nstroke(0);\nstrokeWeight(lineWidth);\nline(x1, y1, x2, y2); // Draw the wire\n\nfill(255, 0, 0);\nnoStroke();\ncircle(x, y, 10); // Draw the moving circle (electron)\n} else {\nstroke(0);\nstrokeWeight(lineWidth);\nline(x1, y1, x2, y2); // Draw the wire\n}\n}\n</code></pre>"},{"location":"sims/pwm/","title":"Pulse-Width Modulation","text":"<p>Run the Pulse-Width Modulation Demo</p> <p>Edit the MicroSim</p> <p>Pulse-width modulation is the way for microcontrollers to send a precise signal to a  device such as a motor controller to control motor speed.  PWM signals can also be used to change the brightness of an LED. This simulation has a slider that allows the user to change the \"duty cycle\" of a waveform.  The simulation is a bright green line on a black background, just like the old CRT oscilloscope displays.</p>"},{"location":"sims/pwm/#sample-chatgpt-prompt","title":"Sample ChatGPT Prompt","text":"<pre><code>Generate a p5.js sketch file of a simulation of a static pulse width\n   modulation (PWM) waveform on a 600x300 canvas.\nAdd a range control slider to adjust the Duty Cycle of the waveform.\nMake the default Duty Cycle be 50%.\nThe min should be 0% and the max should be 100%.\nPlace the range control slider at the bottom of the canvas.\nMake the leftSliderMargin be 155.\nMake sure the range control slider has a width of canvasWidth-leftSliderMargin-20 using the \n   style attribute.\nAt the end of the draw() function add a text() function that displays\n   the label and value of the duty cycle.\n</code></pre> <p>I have tested this prompt several times using GPT-4 and it seems to work very well except for the precise layout of the duty cycle label, value and slider positioning. I had to tweak these by hand.</p> <p>Edit This MicroSim Using the P5.js Editor</p>"},{"location":"sims/pwm/#sample-response","title":"Sample Response","text":"<pre><code>/// Pulse Wave Modulation (PWM) simulation\n// Made to render like an old oscilloscope - lime green on black\n// Most of this sim was generated by GPT-4 with some cleanup on placement of the slider\nlet canvasWidth = 600;\nlet canvasHeight = 200;\nlet dutyCycleSlider;\nlet dutyCycle = 0.5; // Initialize to 50%\nlet cycles = 6;\nlet waveHeight = canvasHeight/3;\nlet leftSliderMargin = 155; // at 16 point font\n\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\n// uncomment if you are placing in an HTML page\n// canvas.parent('canvas-container');\ntextSize(16);\n\ndutyCycleSlider = createSlider(0, 1, 0.5, 0.01); // Range from 0 to 1, default value 0.5, step size 0.01\ndutyCycleSlider.position(leftSliderMargin, canvasHeight - 35); // Position slider\ndutyCycleSlider.style('width', canvasWidth - leftSliderMargin - 20 + 'px'); // Set width of slider\n}\n\nfunction draw() {\nbackground('black');\n\n// Update duty cycle\ndutyCycle = dutyCycleSlider.value();\n\n// Set stroke for waveform\nstroke('limegreen');\n// disable the fill in the waveform\nnoFill();\n// make the line be double wide\nstrokeWeight(2);\n\n// Generate PWM waveform\nbeginShape();\nfor (let x = 0; x &lt; width; x++) {\n// Map x to time period of waveform\nlet t = map(x, 0, width, 0, TWO_PI * cycles);\n\n// Calculate value of waveform at this point in time\n// Draw high if in duty cycle, low otherwise\nlet y = (sin(t) &gt; 2 * dutyCycle - 1) ? 2*height/3 : height/3; // Add vertex to waveform\nvertex(x, y);\n}\nendShape();\n\n// Display duty cycle\nfill('white');\nnoStroke();\n// Display duty cycle as percentage\ntext(\"Duty Cycle: \" + nf(dutyCycle*100, 0, 0) + \"%\", 20, height - 20); }\n</code></pre>"},{"location":"sims/pwm/#key-learnings-from-the-simulation","title":"Key Learnings from the Simulation","text":"<ol> <li>We can use the <code>map()</code> function to transform the x coordinate into the time period of a waverform (t.)</li> <li>We can draw a square wave using a <code>sin()</code> function with a threshold test.</li> <li>We can use the <code>beginShape()</code> and <code>endShape()</code> around as set of <code>vertex()</code> point placements to generate waveforms.</li> <li>We can use the \"number format\" function <code>nf()</code>  to display the percentage without a decimal point.</li> </ol>"},{"location":"sims/pwm/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/pwm/#lesson-plan-prompt","title":"Lesson Plan Prompt","text":"<pre><code>I have a webpage that simulates a pulse-width-modulation waveform. \nThe page has a slider that allows students to change the duty cycle from 0% to 100%.\nWhen the students change the slider, the waveform is updated with the duty cycle.\nGenerate a lesson plan for a 9th-grade robotics class that uses this simulation.\nFor follow up activities, we have Raspberry Pi Picos that we program with MicroPython.\nReturn the response in a single raw markdown file.\n</code></pre>"},{"location":"sims/pwm/#lesson-plan-understanding-pulse-width-modulation-in-robotics","title":"Lesson Plan: Understanding Pulse-Width Modulation in Robotics","text":""},{"location":"sims/pwm/#objective","title":"Objective:","text":"<p>Students will understand the concept of PWM and its application in controlling robotic components like motors and LEDs.</p>"},{"location":"sims/pwm/#materials-needed","title":"Materials Needed:","text":"<ul> <li>Computers with internet access for the PWM simulation webpage.</li> <li>Projector for demonstrations.</li> <li>Optional: Physical components such as a small motor, LED, and Arduino for real-world demonstration.</li> </ul>"},{"location":"sims/pwm/#duration","title":"Duration:","text":"<p>1 hour</p>"},{"location":"sims/pwm/#lesson-outline","title":"Lesson Outline:","text":""},{"location":"sims/pwm/#1-introduction-to-pwm-15-minutes","title":"1. Introduction to PWM (15 minutes)","text":"<ul> <li>Begin with a brief overview of PWM and its significance in robotics.</li> <li>Explain key terms: duty cycle, frequency, analog vs. digital signals.</li> </ul>"},{"location":"sims/pwm/#2-demonstration-of-pwm-simulation-10-minutes","title":"2. Demonstration of PWM Simulation (10 minutes)","text":"<ul> <li>Project the PWM simulation on the screen.</li> <li>Show how changing the duty cycle affects the waveform.</li> <li>Relate this to how it would affect a motor's speed or an LED's brightness.</li> </ul>"},{"location":"sims/pwm/#3-hands-on-activity-with-the-simulation-20-minutes","title":"3. Hands-On Activity with the Simulation (20 minutes)","text":"<ul> <li>Students will use the simulation on their computers.</li> <li>Tasks:</li> <li>Set the duty cycle to various levels (0%, 25%, 50%, 75%, 100%) and observe changes.</li> <li>Students note their observations regarding the waveform changes.</li> </ul>"},{"location":"sims/pwm/#4-real-world-application-discussion-10-minutes","title":"4. Real-World Application Discussion (10 minutes)","text":"<ul> <li>Discuss how PWM is used in real-world robotics.</li> <li>If available, demonstrate using a motor or LED with an Arduino.</li> <li>Encourage students to think of examples where PWM might be used in everyday technology.</li> </ul>"},{"location":"sims/pwm/#5-reflection-and-qa-5-minutes","title":"5. Reflection and Q&amp;A (5 minutes)","text":"<ul> <li>Encourage students to ask questions.</li> <li>Discuss the importance of PWM in precise control in robotics.</li> </ul>"},{"location":"sims/pwm/#assessment","title":"Assessment:","text":"<ul> <li>Students will submit a brief report on their findings from the simulation.</li> <li>Include a few quiz questions at the end of the session to gauge understanding.</li> </ul>"},{"location":"sims/pwm/#extension-activity","title":"Extension Activity:","text":"<ul> <li>For advanced students or as a follow-up lesson, introduce a Python program that uses PWM to control a motor speed using a motor driver chip such as an L293D or control an LED brightness.</li> </ul>"},{"location":"sims/pwm/#notes","title":"Notes:","text":"<ul> <li>Ensure that all students understand the basic concepts before moving to the hands-on activity.</li> <li>Assist students who might have difficulty with the simulation or concepts.</li> <li>Encourage group discussions and peer learning.</li> </ul>"},{"location":"sims/template/","title":"MicroSim Template","text":"![Image Name](./image.png){ width=\"400\" }    Figure caption. <p>Link to Demo</p>"},{"location":"sims/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/template/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/template/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\ncanvas.parent('canvas-container');\nfill(245);\nrect(0,0, canvasWidth, canvasHeight);\nfill('green');\ncircle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/template/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/template/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/template/#activities","title":"Activities","text":""},{"location":"sims/template/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/template/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/template/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/template/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/template/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"}]}